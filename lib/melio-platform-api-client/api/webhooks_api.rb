=begin
#Platform API

#Melio Platform API enables partners to perform partner-related operations in Melio's system, for themselves, and on behalf of their system's users.

The version of the OpenAPI document: 1.0
Contact: platform@melio.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module MelioPlatformApiClient
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the Webhook for Checkouts
    # Disable the URL registered for receiving Checkout-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @return [DeletedResponse]
    def delete_webhooks_checkouts(idempotency_key, opts = {})
      data, _status_code, _headers = delete_webhooks_checkouts_with_http_info(idempotency_key, opts)
      data
    end

    # Delete the Webhook for Checkouts
    # Disable the URL registered for receiving Checkout-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedResponse, Integer, Hash)>] DeletedResponse data, response status code and response headers
    def delete_webhooks_checkouts_with_http_info(idempotency_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.delete_webhooks_checkouts ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling WebhooksApi.delete_webhooks_checkouts"
      end
      # resource path
      local_var_path = '/webhooks/checkouts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = idempotency_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"WebhooksApi.delete_webhooks_checkouts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#delete_webhooks_checkouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the Webhook for Payments
    # Disable the URL registered for receiving Payments-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @return [DeletedResponse]
    def delete_webhooks_payments(idempotency_key, opts = {})
      data, _status_code, _headers = delete_webhooks_payments_with_http_info(idempotency_key, opts)
      data
    end

    # Delete the Webhook for Payments
    # Disable the URL registered for receiving Payments-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletedResponse, Integer, Hash)>] DeletedResponse data, response status code and response headers
    def delete_webhooks_payments_with_http_info(idempotency_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.delete_webhooks_payments ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling WebhooksApi.delete_webhooks_payments"
      end
      # resource path
      local_var_path = '/webhooks/payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = idempotency_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"WebhooksApi.delete_webhooks_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#delete_webhooks_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all Webhooks
    # Retrieve a list of all webhooks configured for the Account
    # @param [Hash] opts the optional parameters
    # @return [GetWebhooksResponse]
    def get_webhooks(opts = {})
      data, _status_code, _headers = get_webhooks_with_http_info(opts)
      data
    end

    # Retrieve all Webhooks
    # Retrieve a list of all webhooks configured for the Account
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWebhooksResponse, Integer, Hash)>] GetWebhooksResponse data, response status code and response headers
    def get_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_webhooks ...'
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWebhooksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_webhooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Status of Webhook for Checkouts
    # Return the current URL registered for receiving Checkout-related webhooks
    # @param [Hash] opts the optional parameters
    # @return [GetWebhooksCheckoutsResponse]
    def get_webhooks_checkouts(opts = {})
      data, _status_code, _headers = get_webhooks_checkouts_with_http_info(opts)
      data
    end

    # Retrieve Status of Webhook for Checkouts
    # Return the current URL registered for receiving Checkout-related webhooks
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWebhooksCheckoutsResponse, Integer, Hash)>] GetWebhooksCheckoutsResponse data, response status code and response headers
    def get_webhooks_checkouts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_webhooks_checkouts ...'
      end
      # resource path
      local_var_path = '/webhooks/checkouts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWebhooksCheckoutsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_webhooks_checkouts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_webhooks_checkouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Status of Webhook for Payments
    # Return the current URL registered for receiving Payments-related webhooks
    # @param [Hash] opts the optional parameters
    # @return [GetWebhooksPaymentsResponse]
    def get_webhooks_payments(opts = {})
      data, _status_code, _headers = get_webhooks_payments_with_http_info(opts)
      data
    end

    # Retrieve Status of Webhook for Payments
    # Return the current URL registered for receiving Payments-related webhooks
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWebhooksPaymentsResponse, Integer, Hash)>] GetWebhooksPaymentsResponse data, response status code and response headers
    def get_webhooks_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_webhooks_payments ...'
      end
      # resource path
      local_var_path = '/webhooks/payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWebhooksPaymentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_webhooks_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_webhooks_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a Webhook for Checkouts
    # Update the URL registered for receiving Checkout-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [PostWebhooksCheckoutsRequest] :post_webhooks_checkouts_request 
    # @return [PostWebhooksCheckoutsResponse]
    def post_webhooks_checkouts(idempotency_key, opts = {})
      data, _status_code, _headers = post_webhooks_checkouts_with_http_info(idempotency_key, opts)
      data
    end

    # Register a Webhook for Checkouts
    # Update the URL registered for receiving Checkout-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [PostWebhooksCheckoutsRequest] :post_webhooks_checkouts_request 
    # @return [Array<(PostWebhooksCheckoutsResponse, Integer, Hash)>] PostWebhooksCheckoutsResponse data, response status code and response headers
    def post_webhooks_checkouts_with_http_info(idempotency_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.post_webhooks_checkouts ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling WebhooksApi.post_webhooks_checkouts"
      end
      # resource path
      local_var_path = '/webhooks/checkouts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = idempotency_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_webhooks_checkouts_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostWebhooksCheckoutsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"WebhooksApi.post_webhooks_checkouts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#post_webhooks_checkouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a Webhook for Payments
    # Update the URL registered for receiving Payments-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [PostWebhooksPaymentsRequest] :post_webhooks_payments_request 
    # @return [PostWebhooksPaymentsResponse]
    def post_webhooks_payments(idempotency_key, opts = {})
      data, _status_code, _headers = post_webhooks_payments_with_http_info(idempotency_key, opts)
      data
    end

    # Register a Webhook for Payments
    # Update the URL registered for receiving Payments-related webhooks
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [PostWebhooksPaymentsRequest] :post_webhooks_payments_request 
    # @return [Array<(PostWebhooksPaymentsResponse, Integer, Hash)>] PostWebhooksPaymentsResponse data, response status code and response headers
    def post_webhooks_payments_with_http_info(idempotency_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.post_webhooks_payments ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling WebhooksApi.post_webhooks_payments"
      end
      # resource path
      local_var_path = '/webhooks/payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = idempotency_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_webhooks_payments_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostWebhooksPaymentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"WebhooksApi.post_webhooks_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#post_webhooks_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
