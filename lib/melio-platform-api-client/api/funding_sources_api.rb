=begin
#Platform API

#Melio Platform API enables partners to perform partner-related operations in Melio's system, for themselves, and on behalf of their system's users.

The version of the OpenAPI document: 1.0
Contact: platform@melio.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module MelioPlatformApiClient
  class FundingSourcesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Funding Source
    # Remove a Funding Source from the Account
    # @param funding_source_id [String] 
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @return [DeletedResponse]
    def delete_funding_sources_funding_source_id(funding_source_id, idempotency_key, opts = {})
      data, _status_code, _headers = delete_funding_sources_funding_source_id_with_http_info(funding_source_id, idempotency_key, opts)
      data
    end

    # Delete a Funding Source
    # Remove a Funding Source from the Account
    # @param funding_source_id [String] 
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @return [Array<(DeletedResponse, Integer, Hash)>] DeletedResponse data, response status code and response headers
    def delete_funding_sources_funding_source_id_with_http_info(funding_source_id, idempotency_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.delete_funding_sources_funding_source_id ...'
      end
      # verify the required parameter 'funding_source_id' is set
      if @api_client.config.client_side_validation && funding_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_id' when calling FundingSourcesApi.delete_funding_sources_funding_source_id"
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling FundingSourcesApi.delete_funding_sources_funding_source_id"
      end
      # resource path
      local_var_path = '/funding-sources/{fundingSourceId}'.sub('{' + 'fundingSourceId' + '}', CGI.escape(funding_source_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Idempotency-Key'] = idempotency_key
      header_params[:'Melio-Account'] = opts[:'melio_account'] if !opts[:'melio_account'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'ApiKey']

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.delete_funding_sources_funding_source_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#delete_funding_sources_funding_source_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Funding Sources
    # Retrieve the Funding Sources of an Account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @return [GetFundingSourcesResponse]
    def get_funding_sources(opts = {})
      data, _status_code, _headers = get_funding_sources_with_http_info(opts)
      data
    end

    # Get all Funding Sources
    # Retrieve the Funding Sources of an Account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @return [Array<(GetFundingSourcesResponse, Integer, Hash)>] GetFundingSourcesResponse data, response status code and response headers
    def get_funding_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_funding_sources ...'
      end
      # resource path
      local_var_path = '/funding-sources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Melio-Account'] = opts[:'melio_account'] if !opts[:'melio_account'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFundingSourcesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'ApiKey']

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_funding_sources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_funding_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Funding Source
    # Retrieve details about a specific Funding Source
    # @param funding_source_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @return [GetFundingSourcesFundingSourceIdResponse]
    def get_funding_sources_funding_source_id(funding_source_id, opts = {})
      data, _status_code, _headers = get_funding_sources_funding_source_id_with_http_info(funding_source_id, opts)
      data
    end

    # Retrieve a Funding Source
    # Retrieve details about a specific Funding Source
    # @param funding_source_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @return [Array<(GetFundingSourcesFundingSourceIdResponse, Integer, Hash)>] GetFundingSourcesFundingSourceIdResponse data, response status code and response headers
    def get_funding_sources_funding_source_id_with_http_info(funding_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_funding_sources_funding_source_id ...'
      end
      # verify the required parameter 'funding_source_id' is set
      if @api_client.config.client_side_validation && funding_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_id' when calling FundingSourcesApi.get_funding_sources_funding_source_id"
      end
      # resource path
      local_var_path = '/funding-sources/{fundingSourceId}'.sub('{' + 'fundingSourceId' + '}', CGI.escape(funding_source_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Melio-Account'] = opts[:'melio_account'] if !opts[:'melio_account'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFundingSourcesFundingSourceIdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'ApiKey']

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_funding_sources_funding_source_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_funding_sources_funding_source_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Funding Source
    # Create a new Funding Source for the Account.  The `type` field determines the contents of the `details` field, according to the following mapping: * `bank-account` => `BankAccount` * `plaid` => `PlaidDetails` * `card` => `Card`
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @option opts [PostFundingSourcesRequest] :post_funding_sources_request 
    # @return [PostFundingSourcesResponse]
    def post_funding_sources(idempotency_key, opts = {})
      data, _status_code, _headers = post_funding_sources_with_http_info(idempotency_key, opts)
      data
    end

    # Create a Funding Source
    # Create a new Funding Source for the Account.  The &#x60;type&#x60; field determines the contents of the &#x60;details&#x60; field, according to the following mapping: * &#x60;bank-account&#x60; &#x3D;&gt; &#x60;BankAccount&#x60; * &#x60;plaid&#x60; &#x3D;&gt; &#x60;PlaidDetails&#x60; * &#x60;card&#x60; &#x3D;&gt; &#x60;Card&#x60;
    # @param idempotency_key [String] Unique idempotency key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :melio_account The &#x60;Melio-Account&#x60; header is used when a Partner wants to perform an operation on behalf of one of its Accounts. It contains the Account&#39;s ID which returned when creating the Account, or when retrieving all of the Partner&#39;s Accounts. Note that most operations are not permitted without the presence of this header.
    # @option opts [PostFundingSourcesRequest] :post_funding_sources_request 
    # @return [Array<(PostFundingSourcesResponse, Integer, Hash)>] PostFundingSourcesResponse data, response status code and response headers
    def post_funding_sources_with_http_info(idempotency_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.post_funding_sources ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling FundingSourcesApi.post_funding_sources"
      end
      # resource path
      local_var_path = '/funding-sources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Idempotency-Key'] = idempotency_key
      header_params[:'Melio-Account'] = opts[:'melio_account'] if !opts[:'melio_account'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_funding_sources_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PostFundingSourcesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken', 'ApiKey']

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.post_funding_sources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#post_funding_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
