=begin
#Platform API

#Melio Platform API enables partners to perform partner-related operations in Melio's system, for themselves, and on behalf of their system's users.

The version of the OpenAPI document: 1.0
Contact: platform@melio.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module MelioPlatformApiClient
  class PaymentIntentAllOf
    attr_accessor :amount_to_pay

    # The ID of the Funding Source that will be used for the produced Payment.
    attr_accessor :funding_source_id

    # Info about the Funding Source that will be used for the produced Payment.
    attr_accessor :funding_source

    # The ID of the Delivery Method that will be used for the produced Payment.
    attr_accessor :delivery_method_id

    # Info about the Delivery Method that will be used for the produced Payment.
    attr_accessor :delivery_method

    # A note that the Vendor will see when receiving the produced Payment.
    attr_accessor :note_to_vendor

    # Automatically calculated fees, based on the `selectedDeliveryPreferenceType` field.
    attr_accessor :estimated_fees

    attr_accessor :scheduled_date

    # The current status of the Payment Intent as a bill entry.
    attr_accessor :status

    # Set this field to control the delivery preferences for the produced Payment. Updating this will trigger fees re-calculation, which reflect in the `estimatedFees` field.
    attr_accessor :selected_delivery_preference_type

    # The possible delivery preference options, based on the current Payment Intent configuration.
    attr_accessor :delivery_preference_options

    # A list of Payments that were produced out of this Payment Intent.
    attr_accessor :payments

    attr_accessor :bill_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount_to_pay' => :'amountToPay',
        :'funding_source_id' => :'fundingSourceId',
        :'funding_source' => :'fundingSource',
        :'delivery_method_id' => :'deliveryMethodId',
        :'delivery_method' => :'deliveryMethod',
        :'note_to_vendor' => :'noteToVendor',
        :'estimated_fees' => :'estimatedFees',
        :'scheduled_date' => :'scheduledDate',
        :'status' => :'status',
        :'selected_delivery_preference_type' => :'selectedDeliveryPreferenceType',
        :'delivery_preference_options' => :'deliveryPreferenceOptions',
        :'payments' => :'payments',
        :'bill_info' => :'billInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount_to_pay' => :'Integer',
        :'funding_source_id' => :'String',
        :'funding_source' => :'FundingSource',
        :'delivery_method_id' => :'String',
        :'delivery_method' => :'DeliveryMethod',
        :'note_to_vendor' => :'String',
        :'estimated_fees' => :'Array<PaymentFee>',
        :'scheduled_date' => :'Date',
        :'status' => :'String',
        :'selected_delivery_preference_type' => :'DeliveryPreferenceType',
        :'delivery_preference_options' => :'Array<DeliveryPreference>',
        :'payments' => :'Array<Payment>',
        :'bill_info' => :'PaymentIntentAllOfBillInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'funding_source_id',
        :'funding_source',
        :'delivery_method_id',
        :'delivery_method',
        :'note_to_vendor',
        :'selected_delivery_preference_type',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MelioPlatformApiClient::PaymentIntentAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MelioPlatformApiClient::PaymentIntentAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount_to_pay')
        self.amount_to_pay = attributes[:'amount_to_pay']
      end

      if attributes.key?(:'funding_source_id')
        self.funding_source_id = attributes[:'funding_source_id']
      end

      if attributes.key?(:'funding_source')
        self.funding_source = attributes[:'funding_source']
      end

      if attributes.key?(:'delivery_method_id')
        self.delivery_method_id = attributes[:'delivery_method_id']
      end

      if attributes.key?(:'delivery_method')
        self.delivery_method = attributes[:'delivery_method']
      end

      if attributes.key?(:'note_to_vendor')
        self.note_to_vendor = attributes[:'note_to_vendor']
      end

      if attributes.key?(:'estimated_fees')
        if (value = attributes[:'estimated_fees']).is_a?(Array)
          self.estimated_fees = value
        end
      end

      if attributes.key?(:'scheduled_date')
        self.scheduled_date = attributes[:'scheduled_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'selected_delivery_preference_type')
        self.selected_delivery_preference_type = attributes[:'selected_delivery_preference_type']
      end

      if attributes.key?(:'delivery_preference_options')
        if (value = attributes[:'delivery_preference_options']).is_a?(Array)
          self.delivery_preference_options = value
        end
      end

      if attributes.key?(:'payments')
        if (value = attributes[:'payments']).is_a?(Array)
          self.payments = value
        end
      end

      if attributes.key?(:'bill_info')
        self.bill_info = attributes[:'bill_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @amount_to_pay.nil?
        invalid_properties.push('invalid value for "amount_to_pay", amount_to_pay cannot be nil.')
      end

      if @estimated_fees.nil?
        invalid_properties.push('invalid value for "estimated_fees", estimated_fees cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @delivery_preference_options.nil?
        invalid_properties.push('invalid value for "delivery_preference_options", delivery_preference_options cannot be nil.')
      end

      if @payments.nil?
        invalid_properties.push('invalid value for "payments", payments cannot be nil.')
      end

      if @bill_info.nil?
        invalid_properties.push('invalid value for "bill_info", bill_info cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount_to_pay.nil?
      return false if @estimated_fees.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["unpaid", "paid", "partially-paid", "scheduled"])
      return false unless status_validator.valid?(@status)
      return false if @delivery_preference_options.nil?
      return false if @payments.nil?
      return false if @bill_info.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["unpaid", "paid", "partially-paid", "scheduled"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount_to_pay == o.amount_to_pay &&
          funding_source_id == o.funding_source_id &&
          funding_source == o.funding_source &&
          delivery_method_id == o.delivery_method_id &&
          delivery_method == o.delivery_method &&
          note_to_vendor == o.note_to_vendor &&
          estimated_fees == o.estimated_fees &&
          scheduled_date == o.scheduled_date &&
          status == o.status &&
          selected_delivery_preference_type == o.selected_delivery_preference_type &&
          delivery_preference_options == o.delivery_preference_options &&
          payments == o.payments &&
          bill_info == o.bill_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount_to_pay, funding_source_id, funding_source, delivery_method_id, delivery_method, note_to_vendor, estimated_fees, scheduled_date, status, selected_delivery_preference_type, delivery_preference_options, payments, bill_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MelioPlatformApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
