=begin
#Platform API

#Melio Platform API enables partners to perform partner-related operations in Melio's system, for themselves, and on behalf of their system's users.

The version of the OpenAPI document: 1.0
Contact: platform@melio.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module MelioPlatformApiClient
  # This core entity facilitates Melio's main use case of transferring funds *from* an Account's Delivery Method *to* a Vendor / Account's Delivery Method on a certain date, along with additional relevant information.
  class Payment
    # Identifier of the entity.
    attr_accessor :id

    attr_accessor :history

    attr_accessor :amount

    attr_accessor :currency

    attr_accessor :scheduled_date

    # A note that is attached to this Payment.
    attr_accessor :note

    attr_accessor :balance

    # Flags whether this Payment can be recovered by providing alternative details, suing the `POST /payments/{paymentId}/recover` endpoint.
    attr_accessor :is_recoverable

    # Identifier of the entity.
    attr_accessor :vendor_id

    # Identifier of the entity.
    attr_accessor :funding_source_id

    # Identifier of the entity.
    attr_accessor :delivery_method_id

    # The current status of this Payment.
    attr_accessor :status

    attr_accessor :estimated_delivery

    # Fees to be charged, based on this Payments details and preferences.
    attr_accessor :fees

    # The message that can be shown in case of a failure.
    attr_accessor :failed_message

    attr_accessor :max_estimated_delivery

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'history' => :'history',
        :'amount' => :'amount',
        :'currency' => :'currency',
        :'scheduled_date' => :'scheduledDate',
        :'note' => :'note',
        :'balance' => :'balance',
        :'is_recoverable' => :'isRecoverable',
        :'vendor_id' => :'vendorId',
        :'funding_source_id' => :'fundingSourceId',
        :'delivery_method_id' => :'deliveryMethodId',
        :'status' => :'status',
        :'estimated_delivery' => :'estimatedDelivery',
        :'fees' => :'fees',
        :'failed_message' => :'failedMessage',
        :'max_estimated_delivery' => :'maxEstimatedDelivery'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'history' => :'ShortHistory',
        :'amount' => :'Integer',
        :'currency' => :'Currency',
        :'scheduled_date' => :'Date',
        :'note' => :'String',
        :'balance' => :'Integer',
        :'is_recoverable' => :'Boolean',
        :'vendor_id' => :'String',
        :'funding_source_id' => :'String',
        :'delivery_method_id' => :'String',
        :'status' => :'String',
        :'estimated_delivery' => :'Date',
        :'fees' => :'Array<PaymentFee>',
        :'failed_message' => :'String',
        :'max_estimated_delivery' => :'Date'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Object',
      :'PaymentAllOf'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MelioPlatformApiClient::Payment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MelioPlatformApiClient::Payment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'history')
        self.history = attributes[:'history']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      else
        self.currency = 'USD'
      end

      if attributes.key?(:'scheduled_date')
        self.scheduled_date = attributes[:'scheduled_date']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'is_recoverable')
        self.is_recoverable = attributes[:'is_recoverable']
      end

      if attributes.key?(:'vendor_id')
        self.vendor_id = attributes[:'vendor_id']
      end

      if attributes.key?(:'funding_source_id')
        self.funding_source_id = attributes[:'funding_source_id']
      end

      if attributes.key?(:'delivery_method_id')
        self.delivery_method_id = attributes[:'delivery_method_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'estimated_delivery')
        self.estimated_delivery = attributes[:'estimated_delivery']
      end

      if attributes.key?(:'fees')
        if (value = attributes[:'fees']).is_a?(Array)
          self.fees = value
        end
      end

      if attributes.key?(:'failed_message')
        self.failed_message = attributes[:'failed_message']
      end

      if attributes.key?(:'max_estimated_delivery')
        self.max_estimated_delivery = attributes[:'max_estimated_delivery']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @history.nil?
        invalid_properties.push('invalid value for "history", history cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @scheduled_date.nil?
        invalid_properties.push('invalid value for "scheduled_date", scheduled_date cannot be nil.')
      end

      if @is_recoverable.nil?
        invalid_properties.push('invalid value for "is_recoverable", is_recoverable cannot be nil.')
      end

      if @funding_source_id.nil?
        invalid_properties.push('invalid value for "funding_source_id", funding_source_id cannot be nil.')
      end

      if @delivery_method_id.nil?
        invalid_properties.push('invalid value for "delivery_method_id", delivery_method_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @estimated_delivery.nil?
        invalid_properties.push('invalid value for "estimated_delivery", estimated_delivery cannot be nil.')
      end

      if @fees.nil?
        invalid_properties.push('invalid value for "fees", fees cannot be nil.')
      end

      if @max_estimated_delivery.nil?
        invalid_properties.push('invalid value for "max_estimated_delivery", max_estimated_delivery cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @history.nil?
      return false if @amount.nil?
      return false if @currency.nil?
      return false if @scheduled_date.nil?
      return false if @is_recoverable.nil?
      return false if @funding_source_id.nil?
      return false if @delivery_method_id.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["scheduled", "in-progress", "completed", "failed", "blocked"])
      return false unless status_validator.valid?(@status)
      return false if @estimated_delivery.nil?
      return false if @fees.nil?
      return false if @max_estimated_delivery.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["scheduled", "in-progress", "completed", "failed", "blocked"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          history == o.history &&
          amount == o.amount &&
          currency == o.currency &&
          scheduled_date == o.scheduled_date &&
          note == o.note &&
          balance == o.balance &&
          is_recoverable == o.is_recoverable &&
          vendor_id == o.vendor_id &&
          funding_source_id == o.funding_source_id &&
          delivery_method_id == o.delivery_method_id &&
          status == o.status &&
          estimated_delivery == o.estimated_delivery &&
          fees == o.fees &&
          failed_message == o.failed_message &&
          max_estimated_delivery == o.max_estimated_delivery
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, history, amount, currency, scheduled_date, note, balance, is_recoverable, vendor_id, funding_source_id, delivery_method_id, status, estimated_delivery, fees, failed_message, max_estimated_delivery].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MelioPlatformApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
